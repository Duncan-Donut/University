For Core 1 and Core 3, the number and type of parameters entered are checked before executing the function, and the function will throw an error if they do not match indicating a statically typed language. This fact is also shown when attempting to assign a variable inside the function to the value of a variable outside the function. As Core 1 and Core 3 are statically typed, if the variable outside the function is after the function, an error will be thrown as the outside variable is not known yet. This is not the case for Core 2 which is a dynamically typed language which evalues the code at run-time instead of compile time. Lastly, when calling functions in core 3, if no arguements are entered then undefined is sent. If an arguement is required and one is entered, then the value is simply ignored. This illustrates that Core 3 is a weakly typed language that is more flexible while Core 1 and Core 2 are strongly typed languages which throw errors instead. 