When assigning values to global variables to variables inside of a function, Advanced Core 2 was the only core that changed the variables value when printed outside of its scope. This is because Advanced Core 2 uses a pass by reference, thus changing the value of the variable anywhere in the program alters the value for all instances of that variable and all the other Core's use pass by reference where they make a copy of the variable and change that copies value. When a variable is evaluated to another variable that is outside of the scope of the function, Core 1 and Core 2 throw an error as they are statically typed languages. This means that the program is evaluated at compile time and since the variable outside the scope is assigned after the function call and not before, the compiler throws an error as that variable has not been defined yet. However if the variable is placed before the function call, Core 1 and Advanced 2 still throw an error as they are strongly typed languages, while Core 2 is weakly typed. The defintion of := states that it will evaluate the expression and change the value the variable is bound to. We can determine Core 2 is weakly typed as even if the variable inside the function has not been created yet, it not throw an error and let the program run. Lastly Advanced Core 1 is the only dynmically typed language which is weakyly typed as it throws an error if a variable is being assigned a value when it has not been initated yet but will not throw an error when if the variable is assigned a value later. 